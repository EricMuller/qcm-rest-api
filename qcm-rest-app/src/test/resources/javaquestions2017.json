[
  {
    "number": 1,
    "categorie": "Java Basics",
    "question": "What is the difference between JDK and JRE?",
    "response": "JDK stands for Java Development Kit. It contains the tools and\nlibraries for development of Java programs. It also contains\ncompilers and debuggers needed to compile Java program,\n \nJRE stands for Java Runtime Environment. This is included in JDK.\nJRE provides libraries and JVM that is required to run a Java\nprogram."
  },
  {
    "number": 2,
    "categorie": "Java Basics",
    "question": "What is Java Virtual Machine (JVM)?",
    "response": "Java Virtual Machine (JVM) is an abstract machine that executes\nJava Bytecode. There are different JVM for different hardware and\nsoftware platforms. So JVM is platform dependent. JVM is\nresponsible for loading, verifying and executing the Bytecode on a\nplatform."
  },
  {
    "number": 3,
    "categorie": "Java Basics",
    "question": "What are the different types of memory areas allocated by JVM?",
    "response": "In java, JVM allocates memory to different processes, methods and\nobjects. Some of the memory areas allocated by JVM are:\n \n1. ClassLoader: It is a component of JVM used to load class\nfiles.\n2. Class (Method) Area: It stores per-class structures such as\nthe runtime constant pool, field and method data, and the\ncode for methods.\n3. Heap: Heap is created a runtime and it contains the runtime\ndata area in which objects are allocated.\n4. Stack: Stack stores local variables and partial results at\nruntime. It also helps in method invocation and return\nvalue. Each thread creates a private JVM stack at the time\nof thread creation.\n5. Program Counter Register: This memory area contains the\naddress of the Java virtual machine instruction that is\ncurrently being executed.\n6. Native Method Stack: This area is reserved for all the\nnative methods used in the application."
  },
  {
    "number": 4,
    "categorie": "Java Basics",
    "question": "What is JIT compiler?",
    "response": "Just In Time compiler also known as JIT compiler is used for\nperformance improvement in Java. It is enabled by default. It is\ncompilation done at execution time rather earlier.\nJava has popularized the use of JIT compiler by including it in\nJVM."
  },
  {
    "number": 5,
    "categorie": "Java Basics",
    "question": "How Java platform is different from other platforms?",
    "response": "Java is a platform independent language. Java compiler converts\nJava code in to byte code that can be interpreted by JVM. There are\nJVM written for almost all the popular platforms in the world.\n \nJava byte code can run on any supported platform in same way.\nWhere as other languages require libraries compiled for a specific\nplatform to run."
  },
  {
    "number": 6,
    "categorie": "Java Basics",
    "question": "Why people say that Java is 'write once and run anywhere' language?",
    "response": "You can write Java code on Windows and compile it in Windows\nplatform. The class and jar files that you get from Windows\nplatform can run as it is on Unix environment. So it is a truly\nplatform independent language.\n \nBehind all this portability is Java byte code. Byte code generated by\nJava compiler can be interpreted by any JVM. So it becomes much\neasier to write programs in Java and expect those to run on any\nplatform.\n \nJava compiler javac compiles java code and JVM java runs that\ncode."
  },
  {
    "number": 7,
    "categorie": "Java Basics",
    "question": "How does ClassLoader work in Java?",
    "response": "In Java, ClassLoader is a class that is used to load files in JVM.\nClassLoader loads files from their physical file locations e.g.\nFilesystem, Network location etc.\n \nThere are three main types of ClassLoaders in Java.\n \n1. Bootstrap ClassLoader: This is the first ClassLoader. It\nloads classes from rt.jar file.\n2. Extension ClassLoader: It loads class files from jre/lib/ext\nlocation.\n3. Application ClassLoader: This ClassLoader depends on\nCLASSPATH to find the location of class files. If you\nspecify your jars in CLASSPATH, then this ClassLoader\nwill load them."
  },
  {
    "number": 8,
    "categorie": "Java Basics",
    "question": "Do you think ‘main’ used for main method is a keyword in Java?",
    "response": "No, main is just a name of method. There can be multiple methods\nwith same name main in a class file. It is not a keyword in Java."
  },
  {
    "number": 9,
    "categorie": "Java Basics",
    "question": "Can we write main method as public void static instead of public static void?",
    "response": "No, you cannot write it like this.  Any method has to first specify the\nmodifiers and then the return value. The order of modifiers can\nchange.\n \nWe can write static public void main() instead of public static void\nmain()."
  },
  {
    "number": 10,
    "categorie": "Java Basics",
    "question": "In Java, if we do not specify any value for local variables, then what will be the default value of the local variables?",
    "response": "Java does not initialize local variables with any default value. So\nthese variables will be just null by default."
  }
]
